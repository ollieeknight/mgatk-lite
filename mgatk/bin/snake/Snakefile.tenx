.tenx
import os
import subprocess
import shutil
import pysam
from os.path import join

# Parse the configuration variables
configfile: config["cfp"]
outdir = config["output_directory"]
mgatk_directory = outdir
name = config["name"]
script_dir = config["script_dir"]
indir = config["input_directory"]

mito_genome = config["mito_chr"]
mito_length = str(config["mito_length"])
fasta_file = config["fasta_file"]

remove_duplicates = config["remove_duplicates"]
barcode_tag = config["barcode_tag"]
umi_barcode = config["umi_barcode"]
emit_base_qualities = config["emit_base_qualities"]

handle_overlap = config["handle_overlap"]
proper_paired = config["proper_paired"]
base_qual = str(config["base_qual"])
alignment_quality = config["alignment_quality"]
NHmax = config["NHmax"]
NMmax = config["NMmax"]
low_coverage_threshold = config["low_coverage_threshold"]

max_javamem = config["max_javamem"]

# Software paths
java = "java"
python = "python"

# Script locations
filtclip_py = join(script_dir, "bin/python/filterClipBam.py")
picardCall = f"{java} -Xmx{max_javamem} -jar {join(script_dir, 'bin/picard.jar')} MarkDuplicates"

# A Snakemake regular expression matching the bam file paths
SAMPLES, = glob_wildcards(join(outdir, ".internal/samples/{sample}.bam.txt"))
bamtxtin = ''

rule all:
    input:
        f"{mgatk_directory}/final/{name}.depthTable.txt",
        f"{mgatk_directory}/final/{name}.A.txt.gz",
        f"{mgatk_directory}/final/{name}.C.txt.gz",
        f"{mgatk_directory}/final/{name}.G.txt.gz",
        f"{mgatk_directory}/final/{name}.T.txt.gz",
        f"{mgatk_directory}/final/{name}.coverage.txt.gz",
        f"{mgatk_directory}/final/{name}.variant_stats.tsv.gz",
        f"{mgatk_directory}/final/{name}.cell_heteroplasmic_df.tsv.gz",
        f"{mgatk_directory}/final/{name}.vmr_strand_plot.png"

rule process_one_slice:
    input:
        txtin = join(outdir, ".internal/samples/{sample}.bam.txt")
    output:
        tempbam0 = join(outdir, "temp/temp_bam/{sample}.temp0.bam"),
        depth = join(outdir, "logs/depth/{sample}_depth.txt"),
        A = join(outdir, "temp/sparse_matrices/{sample}.A.txt"),
        C = join(outdir, "temp/sparse_matrices/{sample}.C.txt"),
        G = join(outdir, "temp/sparse_matrices/{sample}.G.txt"),
        T = join(outdir, "temp/sparse_matrices/{sample}.T.txt"),
        cov = join(outdir, "temp/sparse_matrices/{sample}.coverage.txt")
    shell:
        """
        sample={wildcards.sample}
        input_bam=$(cat {input.txtin})
        output_bam={output.tempbam0}
        filtlog={join(outdir, "logs/filter", "{wildcards.sample}.log")}
        mito_genome={mito_genome}
        proper_paired={proper_paired}
        NHmax={NHmax}
        NMmax={NMmax}
        python={python}
        filtclip_py={filtclip_py}

        # Ensure the output directory exists
        mkdir -p $(dirname "$output_bam")

        # 1) Filter bam files
        $python $filtclip_py "$input_bam" "$filtlog" "$mito_genome" "$proper_paired" "$NHmax" "$NMmax" > "$output_bam"

        # Check if the filtering was successful
        if [ $? -ne 0 ]; then
            echo "Filtering failed for sample $sample" >&2
            exit 1
        fi
        """

rule sort_bam:
    input:
        tempbam0 = join(outdir, "temp/temp_bam/{sample}.temp0.bam")
    output:
        tempbam1 = join(outdir, "temp/temp_bam/{sample}.temp1.bam")
    run:
        try:
            pysam.sort("-o", output.tempbam1, input.tempbam0)
            pysam.index(output.tempbam1)
        except Exception as e:
            logger.error(f"Sorting/indexing failed for sample {wildcards.sample}: {e}")
            raise

rule remove_duplicates:
    input:
        tempbam1 = join(outdir, "temp/temp_bam/{sample}.temp1.bam")
    output:
        output_bam = join(outdir, f"temp/ready_bam/{wildcards.sample}.qc.bam")
    shell:
        """
        tempbam1={input.tempbam1}
        output_bam={output.output_bam}
        rmlog={join(outdir, "logs/rmdupslogs", "{wildcards.sample}.rmdups.log")}
        java={java}
        max_javamem={max_javamem}
        script_dir={script_dir}
        umi_barcode={umi_barcode}

        # Ensure the output directory exists
        mkdir -p $(dirname "$output_bam")

        if [ "{remove_duplicates}" == "True" ]; then
            $java -Xmx${max_javamem} -jar {join(script_dir, 'bin/picard.jar')} MarkDuplicates I="$tempbam1" O="$output_bam" M="$rmlog" REMOVE_DUPLICATES=true ASSUME_SORTED=true VALIDATION_STRINGENCY=SILENT QUIET=true VERBOSITY=ERROR USE_JDK_DEFLATER=true USE_JDK_INFLATER=true BARCODE_TAG="$umi_barcode"
            if [ $? -ne 0 ]; then
                echo "MarkDuplicates failed for sample {wildcards.sample}" >&2
                exit 1
            fi
        else
            mv "$tempbam1" "$output_bam"
            rm "${tempbam1}.bai"
        fi
        """

rule collect_genotype_counts:
    input:
        output_bam = join(outdir, f"temp/ready_bam/{{sample}}.qc.bam")
    output:
        depth = join(outdir, "logs/depth/{sample}_depth.txt"),
        A = join(outdir, "temp/sparse_matrices/{sample}.A.txt"),
        C = join(outdir, "temp/sparse_matrices/{sample}.C.txt"),
        G = join(outdir, "temp/sparse_matrices/{sample}.G.txt"),
        T = join(outdir, "temp/sparse_matrices/{sample}.T.txt"),
        cov = join(outdir, "temp/sparse_matrices/{sample}.coverage.txt")
    shell:
        """
        output_bam={input.output_bam}
        barcodes_file={join(outdir, f"temp/barcode_files/{{wildcards.sample}}.txt")}
        out_pre={join(outdir, f"temp/sparse_matrices/{{wildcards.sample}}")}
        mito_length={mito_length}
        base_qual={base_qual}
        fasta_file={fasta_file}
        alignment_quality={alignment_quality}
        barcode_tag={barcode_tag}
        python={python}
        handle_overlap={handle_overlap}
        script_dir={script_dir}

        sumstats_tenx_py=$script_dir/bin/python/sumstatsBPtenx_overlap.py
        if [ "{handle_overlap}" != "True" ]; then
            sumstats_tenx_py=$script_dir/bin/python/sumstatsBPtenx.py
        fi

        $python "$sumstats_tenx_py" "$output_bam" "$barcodes_file" "$out_pre" "$mito_length" "$base_qual" "$fasta_file" "$alignment_quality" "$barcode_tag"
        if [ $? -ne 0 ]; then
            echo "sumstats failed for sample {wildcards.sample}" >&2
            exit 1
        fi
        """

rule make_depth_table:
    input:
        depths = expand(join(mgatk_directory, "logs/depth/{sample}_depth.txt"), sample=SAMPLES)
    output:
        depthtable = join(mgatk_directory, f"final/{name}.depthTable.txt")
    run:
        with open(output.depthtable, 'w') as f:
            for file in input.depths:
                with open(file) as infile:
                    f.write(infile.read())

rule make_final_sparse_matrices:
    input:
        As = expand(join(mgatk_directory, "temp/sparse_matrices/{sample}.A.txt"), sample=SAMPLES),
        Cs = expand(join(mgatk_directory, "temp/sparse_matrices/{sample}.C.txt"), sample=SAMPLES),
        Gs = expand(join(mgatk_directory, "temp/sparse_matrices/{sample}.G.txt"), sample=SAMPLES),
        Ts = expand(join(mgatk_directory, "temp/sparse_matrices/{sample}.T.txt"), sample=SAMPLES),
        Covs = expand(join(mgatk_directory, "temp/sparse_matrices/{sample}.coverage.txt"), sample=SAMPLES)
    output:
        A = join(mgatk_directory, f"final/{name}.A.txt.gz"),
        C = join(mgatk_directory, f"final/{name}.C.txt.gz"),
        G = join(mgatk_directory, f"final/{name}.G.txt.gz"),
        T = join(mgatk_directory, f"final/{name}.T.txt.gz"),
        Cov = join(mgatk_directory, f"final/{name}.coverage.txt.gz")
    run:
        def makeSM(iterableThing, l):
            with open(join(mgatk_directory, f"final/{name}.{l}.txt"), 'w') as outfile:
                for i in iterableThing:
                    with open(i) as infile:
                        outfile.write(infile.read())
            subprocess.run(f"gzip {join(mgatk_directory, f'final/{name}.{l}.txt')}", shell=True)

        makeSM(input.As, "A")
        makeSM(input.Cs, "C")
        makeSM(input.Gs, "G")
        makeSM(input.Ts, "T")
        makeSM(input.Covs, "coverage")

rule call_variants:
    input:
        A = join(mgatk_directory, f"final/{name}.A.txt.gz"),
        C = join(mgatk_directory, f"final/{name}.C.txt.gz"),
        G = join(mgatk_directory, f"final/{name}.G.txt.gz"),
        T = join(mgatk_directory, f"final/{name}.T.txt.gz"),
        chrM_ref = join(mgatk_directory, f"final/{mito_genome}_refAllele.txt")
    output:
        variant_stats = join(mgatk_directory, f"final/{name}.variant_stats.tsv.gz"),
        heteroplasmy_df = join(mgatk_directory, f"final/{name}.cell_heteroplasmic_df.tsv.gz"),
        vmr_strand_plot = join(mgatk_directory, f"final/{name}.vmr_strand_plot.png")
    run:
        call_variant_py = join(script_dir, "bin/python/variant_calling.py")
        pycall = f"{python} {call_variant_py} {join(mgatk_directory, 'final/')} {name} {mito_length} {low_coverage_threshold} {mito_genome}"
        subprocess.run(pycall, shell=True)